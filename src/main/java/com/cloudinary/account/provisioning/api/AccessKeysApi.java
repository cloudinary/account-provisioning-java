/*
 * Cloudinary Account Provisioning API
 * Accounts with provisioning API access can create and manage their **product environments**, **users** and **user groups** using the RESTful Provisioning API.   Provisioning API access is available [upon request](https://cloudinary.com/contact?plan=enterprise) for accounts on an [Enterprise plan](https://cloudinary.com/pricing#pricing-enterprise).  The API uses **Basic Authentication** over HTTPS. Your **Provisioning Key** and **Provisioning Secret** are used for the authentication. These credentials (as well as your ACCOUNT_ID) are located in the [Cloudinary Console](https://console.cloudinary.com/pm) under **Settings > Account > Provisioning API Access**, or they can be obtained from the provisioning environment variable available on your Cloudinary Console [Dashboard](https://console.cloudinary.com/pm/developer-dashboard).  The Provisioning API has dedicated SDKs for the following languages:  * [JavaScript](https://github.com/cloudinary/account-provisioning-js) * [PHP](https://github.com/cloudinary/account-provisioning-php) * [Java](https://github.com/cloudinary/account-provisioning-java)  Useful links: * [Provisioning API reference (Classic)](https://cloudinary.com/documentation/provisioning_api_1) 
 *
 * The version of the OpenAPI document: 0.1.2
 * Contact: support@cloudinary.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudinary.account.provisioning.api;

import com.cloudinary.account.provisioning.ApiCallback;
import com.cloudinary.account.provisioning.ApiClient;
import com.cloudinary.account.provisioning.ApiException;
import com.cloudinary.account.provisioning.ApiResponse;
import com.cloudinary.account.provisioning.Configuration;
import com.cloudinary.account.provisioning.Pair;
import com.cloudinary.account.provisioning.ProgressRequestBody;
import com.cloudinary.account.provisioning.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cloudinary.account.provisioning.model.AccessKey;
import com.cloudinary.account.provisioning.model.AccessKeyRequest;
import com.cloudinary.account.provisioning.model.AccessKeyUpdateRequest;
import com.cloudinary.account.provisioning.model.AccessKeysResponse;
import com.cloudinary.account.provisioning.model.ErrorResponse;
import com.cloudinary.account.provisioning.model.SuccessResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccessKeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAccessKey
     * @param subAccountId The ID of the product environment. (required)
     * @param key The access key (api key). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_an_access_key">Delete access key Documentation</a>
     */
    public okhttp3.Call deleteAccessKeyCall(String subAccountId, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sub_accounts/{sub_account_id}/access_keys/{key}"
            .replaceAll("\\{" + "sub_account_id" + "\\}", localVarApiClient.escapeString(subAccountId.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessKeyValidateBeforeCall(String subAccountId, String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling deleteAccessKey(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteAccessKey(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccessKeyCall(subAccountId, key, _callback);
        return localVarCall;

    }

    /**
     * Delete access key
     * Delete a specific access key.
     * @param subAccountId The ID of the product environment. (required)
     * @param key The access key (api key). (required)
     * @return SuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_an_access_key">Delete access key Documentation</a>
     */
    public SuccessResponse deleteAccessKey(String subAccountId, String key) throws ApiException {
        ApiResponse<SuccessResponse> localVarResp = deleteAccessKeyWithHttpInfo(subAccountId, key);
        return localVarResp.getData();
    }

    /**
     * Delete access key
     * Delete a specific access key.
     * @param subAccountId The ID of the product environment. (required)
     * @param key The access key (api key). (required)
     * @return ApiResponse&lt;SuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_an_access_key">Delete access key Documentation</a>
     */
    public ApiResponse<SuccessResponse> deleteAccessKeyWithHttpInfo(String subAccountId, String key) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessKeyValidateBeforeCall(subAccountId, key, null);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete access key (asynchronously)
     * Delete a specific access key.
     * @param subAccountId The ID of the product environment. (required)
     * @param key The access key (api key). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_an_access_key">Delete access key Documentation</a>
     */
    public okhttp3.Call deleteAccessKeyAsync(String subAccountId, String key, final ApiCallback<SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessKeyValidateBeforeCall(subAccountId, key, _callback);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccessKeyByName
     * @param subAccountId The ID of the product environment. (required)
     * @param name The access key name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_an_access_key">Delete access key by name Documentation</a>
     */
    public okhttp3.Call deleteAccessKeyByNameCall(String subAccountId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sub_accounts/{sub_account_id}/access_keys"
            .replaceAll("\\{" + "sub_account_id" + "\\}", localVarApiClient.escapeString(subAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessKeyByNameValidateBeforeCall(String subAccountId, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling deleteAccessKeyByName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAccessKeyByName(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccessKeyByNameCall(subAccountId, name, _callback);
        return localVarCall;

    }

    /**
     * Delete access key by name
     * Delete a specific access key by name.
     * @param subAccountId The ID of the product environment. (required)
     * @param name The access key name. (required)
     * @return SuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_an_access_key">Delete access key by name Documentation</a>
     */
    public SuccessResponse deleteAccessKeyByName(String subAccountId, String name) throws ApiException {
        ApiResponse<SuccessResponse> localVarResp = deleteAccessKeyByNameWithHttpInfo(subAccountId, name);
        return localVarResp.getData();
    }

    /**
     * Delete access key by name
     * Delete a specific access key by name.
     * @param subAccountId The ID of the product environment. (required)
     * @param name The access key name. (required)
     * @return ApiResponse&lt;SuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_an_access_key">Delete access key by name Documentation</a>
     */
    public ApiResponse<SuccessResponse> deleteAccessKeyByNameWithHttpInfo(String subAccountId, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessKeyByNameValidateBeforeCall(subAccountId, name, null);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete access key by name (asynchronously)
     * Delete a specific access key by name.
     * @param subAccountId The ID of the product environment. (required)
     * @param name The access key name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access Key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_an_access_key">Delete access key by name Documentation</a>
     */
    public okhttp3.Call deleteAccessKeyByNameAsync(String subAccountId, String name, final ApiCallback<SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessKeyByNameValidateBeforeCall(subAccountId, name, _callback);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateAccessKey
     * @param subAccountId The ID of the product environment. (required)
     * @param accessKeyRequest Access key details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access key created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about generating access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#generate_an_access_key">Generate an access key Documentation</a>
     */
    public okhttp3.Call generateAccessKeyCall(String subAccountId, AccessKeyRequest accessKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessKeyRequest;

        // create path and map variables
        String localVarPath = "/sub_accounts/{sub_account_id}/access_keys"
            .replaceAll("\\{" + "sub_account_id" + "\\}", localVarApiClient.escapeString(subAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateAccessKeyValidateBeforeCall(String subAccountId, AccessKeyRequest accessKeyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling generateAccessKey(Async)");
        }
        

        okhttp3.Call localVarCall = generateAccessKeyCall(subAccountId, accessKeyRequest, _callback);
        return localVarCall;

    }

    /**
     * Generate an access key
     * Generate a new access key.
     * @param subAccountId The ID of the product environment. (required)
     * @param accessKeyRequest Access key details (optional)
     * @return AccessKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access key created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about generating access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#generate_an_access_key">Generate an access key Documentation</a>
     */
    public AccessKey generateAccessKey(String subAccountId, AccessKeyRequest accessKeyRequest) throws ApiException {
        ApiResponse<AccessKey> localVarResp = generateAccessKeyWithHttpInfo(subAccountId, accessKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Generate an access key
     * Generate a new access key.
     * @param subAccountId The ID of the product environment. (required)
     * @param accessKeyRequest Access key details (optional)
     * @return ApiResponse&lt;AccessKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access key created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about generating access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#generate_an_access_key">Generate an access key Documentation</a>
     */
    public ApiResponse<AccessKey> generateAccessKeyWithHttpInfo(String subAccountId, AccessKeyRequest accessKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = generateAccessKeyValidateBeforeCall(subAccountId, accessKeyRequest, null);
        Type localVarReturnType = new TypeToken<AccessKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate an access key (asynchronously)
     * Generate a new access key.
     * @param subAccountId The ID of the product environment. (required)
     * @param accessKeyRequest Access key details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access key created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about generating access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#generate_an_access_key">Generate an access key Documentation</a>
     */
    public okhttp3.Call generateAccessKeyAsync(String subAccountId, AccessKeyRequest accessKeyRequest, final ApiCallback<AccessKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateAccessKeyValidateBeforeCall(subAccountId, accessKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccessKeys
     * @param subAccountId The ID of the product environment. (required)
     * @param pageSize How many entries to display on each page. (optional)
     * @param page Which page to return (maximum pages 100). **Default**: All pages are returned.  (optional)
     * @param sortBy Which response parameter to sort by. **Possible values**: &#x60;api_key&#x60;, &#x60;created_at&#x60;, &#x60;name&#x60;, &#x60;enabled&#x60;.  (optional)
     * @param sortOrder Control the order of returned keys. **Possible values**: &#x60;desc&#x60; (default), &#x60;asc&#x60;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_access_keys">Get access keys Documentation</a>
     */
    public okhttp3.Call getAccessKeysCall(String subAccountId, Integer pageSize, Integer page, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sub_accounts/{sub_account_id}/access_keys"
            .replaceAll("\\{" + "sub_account_id" + "\\}", localVarApiClient.escapeString(subAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessKeysValidateBeforeCall(String subAccountId, Integer pageSize, Integer page, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling getAccessKeys(Async)");
        }
        

        okhttp3.Call localVarCall = getAccessKeysCall(subAccountId, pageSize, page, sortBy, sortOrder, _callback);
        return localVarCall;

    }

    /**
     * Get access keys
     * Retrieve an array of all access keys for a product environment.
     * @param subAccountId The ID of the product environment. (required)
     * @param pageSize How many entries to display on each page. (optional)
     * @param page Which page to return (maximum pages 100). **Default**: All pages are returned.  (optional)
     * @param sortBy Which response parameter to sort by. **Possible values**: &#x60;api_key&#x60;, &#x60;created_at&#x60;, &#x60;name&#x60;, &#x60;enabled&#x60;.  (optional)
     * @param sortOrder Control the order of returned keys. **Possible values**: &#x60;desc&#x60; (default), &#x60;asc&#x60;.  (optional)
     * @return AccessKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_access_keys">Get access keys Documentation</a>
     */
    public AccessKeysResponse getAccessKeys(String subAccountId, Integer pageSize, Integer page, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<AccessKeysResponse> localVarResp = getAccessKeysWithHttpInfo(subAccountId, pageSize, page, sortBy, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Get access keys
     * Retrieve an array of all access keys for a product environment.
     * @param subAccountId The ID of the product environment. (required)
     * @param pageSize How many entries to display on each page. (optional)
     * @param page Which page to return (maximum pages 100). **Default**: All pages are returned.  (optional)
     * @param sortBy Which response parameter to sort by. **Possible values**: &#x60;api_key&#x60;, &#x60;created_at&#x60;, &#x60;name&#x60;, &#x60;enabled&#x60;.  (optional)
     * @param sortOrder Control the order of returned keys. **Possible values**: &#x60;desc&#x60; (default), &#x60;asc&#x60;.  (optional)
     * @return ApiResponse&lt;AccessKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_access_keys">Get access keys Documentation</a>
     */
    public ApiResponse<AccessKeysResponse> getAccessKeysWithHttpInfo(String subAccountId, Integer pageSize, Integer page, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getAccessKeysValidateBeforeCall(subAccountId, pageSize, page, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<AccessKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get access keys (asynchronously)
     * Retrieve an array of all access keys for a product environment.
     * @param subAccountId The ID of the product environment. (required)
     * @param pageSize How many entries to display on each page. (optional)
     * @param page Which page to return (maximum pages 100). **Default**: All pages are returned.  (optional)
     * @param sortBy Which response parameter to sort by. **Possible values**: &#x60;api_key&#x60;, &#x60;created_at&#x60;, &#x60;name&#x60;, &#x60;enabled&#x60;.  (optional)
     * @param sortOrder Control the order of returned keys. **Possible values**: &#x60;desc&#x60; (default), &#x60;asc&#x60;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_access_keys">Get access keys Documentation</a>
     */
    public okhttp3.Call getAccessKeysAsync(String subAccountId, Integer pageSize, Integer page, String sortBy, String sortOrder, final ApiCallback<AccessKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessKeysValidateBeforeCall(subAccountId, pageSize, page, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<AccessKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccessKey
     * @param subAccountId The ID of the product environment. (required)
     * @param key The access key (api key). (required)
     * @param accessKeyUpdateRequest Access key details for update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access key updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about updating access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#update_an_access_key">Update an access key Documentation</a>
     */
    public okhttp3.Call updateAccessKeyCall(String subAccountId, String key, AccessKeyUpdateRequest accessKeyUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessKeyUpdateRequest;

        // create path and map variables
        String localVarPath = "/sub_accounts/{sub_account_id}/access_keys/{key}"
            .replaceAll("\\{" + "sub_account_id" + "\\}", localVarApiClient.escapeString(subAccountId.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccessKeyValidateBeforeCall(String subAccountId, String key, AccessKeyUpdateRequest accessKeyUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling updateAccessKey(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateAccessKey(Async)");
        }
        

        okhttp3.Call localVarCall = updateAccessKeyCall(subAccountId, key, accessKeyUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update an access key
     * Update the name and/or status of an existing access key.
     * @param subAccountId The ID of the product environment. (required)
     * @param key The access key (api key). (required)
     * @param accessKeyUpdateRequest Access key details for update (optional)
     * @return AccessKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access key updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about updating access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#update_an_access_key">Update an access key Documentation</a>
     */
    public AccessKey updateAccessKey(String subAccountId, String key, AccessKeyUpdateRequest accessKeyUpdateRequest) throws ApiException {
        ApiResponse<AccessKey> localVarResp = updateAccessKeyWithHttpInfo(subAccountId, key, accessKeyUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update an access key
     * Update the name and/or status of an existing access key.
     * @param subAccountId The ID of the product environment. (required)
     * @param key The access key (api key). (required)
     * @param accessKeyUpdateRequest Access key details for update (optional)
     * @return ApiResponse&lt;AccessKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access key updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about updating access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#update_an_access_key">Update an access key Documentation</a>
     */
    public ApiResponse<AccessKey> updateAccessKeyWithHttpInfo(String subAccountId, String key, AccessKeyUpdateRequest accessKeyUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccessKeyValidateBeforeCall(subAccountId, key, accessKeyUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AccessKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an access key (asynchronously)
     * Update the name and/or status of an existing access key.
     * @param subAccountId The ID of the product environment. (required)
     * @param key The access key (api key). (required)
     * @param accessKeyUpdateRequest Access key details for update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access key updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about updating access keys.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#update_an_access_key">Update an access key Documentation</a>
     */
    public okhttp3.Call updateAccessKeyAsync(String subAccountId, String key, AccessKeyUpdateRequest accessKeyUpdateRequest, final ApiCallback<AccessKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccessKeyValidateBeforeCall(subAccountId, key, accessKeyUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
