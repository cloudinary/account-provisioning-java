/*
 * Cloudinary Account Provisioning API
 * Accounts with provisioning API access can create and manage their **product environments**, **users** and **user groups** using the RESTful Provisioning API.   Provisioning API access is available [upon request](https://cloudinary.com/contact?plan=enterprise) for accounts on an [Enterprise plan](https://cloudinary.com/pricing#pricing-enterprise). 
 *
 * The version of the OpenAPI document: 0.0.4
 * Contact: support@cloudinary.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudinary.account.provisioning.api;

import com.cloudinary.account.provisioning.ApiCallback;
import com.cloudinary.account.provisioning.ApiClient;
import com.cloudinary.account.provisioning.ApiException;
import com.cloudinary.account.provisioning.ApiResponse;
import com.cloudinary.account.provisioning.Configuration;
import com.cloudinary.account.provisioning.Pair;
import com.cloudinary.account.provisioning.ProgressRequestBody;
import com.cloudinary.account.provisioning.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cloudinary.account.provisioning.model.ErrorResponse;
import com.cloudinary.account.provisioning.model.SuccessResponse;
import com.cloudinary.account.provisioning.model.UserGroup;
import com.cloudinary.account.provisioning.model.UserGroupRequest;
import com.cloudinary.account.provisioning.model.UserGroupUser;
import com.cloudinary.account.provisioning.model.UserGroupUsersResponse;
import com.cloudinary.account.provisioning.model.UserGroupsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addUserToUserGroup
     * @param groupId The ID of the user group. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to group successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about adding users to a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#add_user_to_group">Add User to User Group Documentation</a>
     */
    public okhttp3.Call addUserToUserGroupCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_groups/{group_id}/users/{user_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToUserGroupValidateBeforeCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addUserToUserGroup(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addUserToUserGroup(Async)");
        }
        

        okhttp3.Call localVarCall = addUserToUserGroupCall(groupId, userId, _callback);
        return localVarCall;

    }

    /**
     * Add User to User Group
     * Add a user to a group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @param userId The ID of the user. (required)
     * @return UserGroupUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to group successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about adding users to a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#add_user_to_group">Add User to User Group Documentation</a>
     */
    public UserGroupUser addUserToUserGroup(String groupId, String userId) throws ApiException {
        ApiResponse<UserGroupUser> localVarResp = addUserToUserGroupWithHttpInfo(groupId, userId);
        return localVarResp.getData();
    }

    /**
     * Add User to User Group
     * Add a user to a group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;UserGroupUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to group successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about adding users to a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#add_user_to_group">Add User to User Group Documentation</a>
     */
    public ApiResponse<UserGroupUser> addUserToUserGroupWithHttpInfo(String groupId, String userId) throws ApiException {
        okhttp3.Call localVarCall = addUserToUserGroupValidateBeforeCall(groupId, userId, null);
        Type localVarReturnType = new TypeToken<UserGroupUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add User to User Group (asynchronously)
     * Add a user to a group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to group successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about adding users to a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#add_user_to_group">Add User to User Group Documentation</a>
     */
    public okhttp3.Call addUserToUserGroupAsync(String groupId, String userId, final ApiCallback<UserGroupUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToUserGroupValidateBeforeCall(groupId, userId, _callback);
        Type localVarReturnType = new TypeToken<UserGroupUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUserGroup
     * @param userGroupRequest User group details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about creating user groups.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#create_user_group">Create User Group Documentation</a>
     */
    public okhttp3.Call createUserGroupCall(UserGroupRequest userGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userGroupRequest;

        // create path and map variables
        String localVarPath = "/user_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserGroupValidateBeforeCall(UserGroupRequest userGroupRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createUserGroupCall(userGroupRequest, _callback);
        return localVarCall;

    }

    /**
     * Create User Group
     * Create a new user group for the account.
     * @param userGroupRequest User group details (optional)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about creating user groups.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#create_user_group">Create User Group Documentation</a>
     */
    public UserGroup createUserGroup(UserGroupRequest userGroupRequest) throws ApiException {
        ApiResponse<UserGroup> localVarResp = createUserGroupWithHttpInfo(userGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create User Group
     * Create a new user group for the account.
     * @param userGroupRequest User group details (optional)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about creating user groups.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#create_user_group">Create User Group Documentation</a>
     */
    public ApiResponse<UserGroup> createUserGroupWithHttpInfo(UserGroupRequest userGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserGroupValidateBeforeCall(userGroupRequest, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User Group (asynchronously)
     * Create a new user group for the account.
     * @param userGroupRequest User group details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about creating user groups.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#create_user_group">Create User Group Documentation</a>
     */
    public okhttp3.Call createUserGroupAsync(UserGroupRequest userGroupRequest, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserGroupValidateBeforeCall(userGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserGroup
     * @param groupId The ID of the user group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_user_group">Delete User Group Documentation</a>
     */
    public okhttp3.Call deleteUserGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteUserGroup(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserGroupCall(groupId, _callback);
        return localVarCall;

    }

    /**
     * Delete User Group
     * Delete a user group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @return SuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_user_group">Delete User Group Documentation</a>
     */
    public SuccessResponse deleteUserGroup(String groupId) throws ApiException {
        ApiResponse<SuccessResponse> localVarResp = deleteUserGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Delete User Group
     * Delete a user group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @return ApiResponse&lt;SuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_user_group">Delete User Group Documentation</a>
     */
    public ApiResponse<SuccessResponse> deleteUserGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete User Group (asynchronously)
     * Delete a user group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about deleting a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#delete_user_group">Delete User Group Documentation</a>
     */
    public okhttp3.Call deleteUserGroupAsync(String groupId, final ApiCallback<SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserGroup
     * @param groupId The ID of the user group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_group">Get User Group Documentation</a>
     */
    public okhttp3.Call getUserGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getUserGroup(Async)");
        }
        

        okhttp3.Call localVarCall = getUserGroupCall(groupId, _callback);
        return localVarCall;

    }

    /**
     * Get User Group
     * Retrieve a specific user group.
     * @param groupId The ID of the user group. (required)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_group">Get User Group Documentation</a>
     */
    public UserGroup getUserGroup(String groupId) throws ApiException {
        ApiResponse<UserGroup> localVarResp = getUserGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Get User Group
     * Retrieve a specific user group.
     * @param groupId The ID of the user group. (required)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_group">Get User Group Documentation</a>
     */
    public ApiResponse<UserGroup> getUserGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getUserGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Group (asynchronously)
     * Retrieve a specific user group.
     * @param groupId The ID of the user group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_group">Get User Group Documentation</a>
     */
    public okhttp3.Call getUserGroupAsync(String groupId, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserGroups
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving user groups.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_groups">Get User Groups Documentation</a>
     */
    public okhttp3.Call getUserGroupsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getUserGroupsCall(_callback);
        return localVarCall;

    }

    /**
     * Get User Groups
     * Retrieve an array of all user groups in the account.
     * @return UserGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving user groups.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_groups">Get User Groups Documentation</a>
     */
    public UserGroupsResponse getUserGroups() throws ApiException {
        ApiResponse<UserGroupsResponse> localVarResp = getUserGroupsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get User Groups
     * Retrieve an array of all user groups in the account.
     * @return ApiResponse&lt;UserGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving user groups.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_groups">Get User Groups Documentation</a>
     */
    public ApiResponse<UserGroupsResponse> getUserGroupsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserGroupsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Groups (asynchronously)
     * Retrieve an array of all user groups in the account.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving user groups.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_groups">Get User Groups Documentation</a>
     */
    public okhttp3.Call getUserGroupsAsync(final ApiCallback<UserGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGroupsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersInUserGroup
     * @param groupId The ID of the user group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving users in a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_group_users">Get Users in User Group Documentation</a>
     */
    public okhttp3.Call getUsersInUserGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_groups/{group_id}/users"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersInUserGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getUsersInUserGroup(Async)");
        }
        

        okhttp3.Call localVarCall = getUsersInUserGroupCall(groupId, _callback);
        return localVarCall;

    }

    /**
     * Get Users in User Group
     * Retrieve the users in the group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @return UserGroupUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving users in a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_group_users">Get Users in User Group Documentation</a>
     */
    public UserGroupUsersResponse getUsersInUserGroup(String groupId) throws ApiException {
        ApiResponse<UserGroupUsersResponse> localVarResp = getUsersInUserGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Get Users in User Group
     * Retrieve the users in the group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @return ApiResponse&lt;UserGroupUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving users in a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_group_users">Get Users in User Group Documentation</a>
     */
    public ApiResponse<UserGroupUsersResponse> getUsersInUserGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getUsersInUserGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<UserGroupUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Users in User Group (asynchronously)
     * Retrieve the users in the group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about retrieving users in a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_user_group_users">Get Users in User Group Documentation</a>
     */
    public okhttp3.Call getUsersInUserGroupAsync(String groupId, final ApiCallback<UserGroupUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersInUserGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<UserGroupUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeUserFromUserGroup
     * @param groupId The ID of the user group. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User removed from group successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about removing users from a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#remove_user_from_group">Remove User from User Group Documentation</a>
     */
    public okhttp3.Call removeUserFromUserGroupCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_groups/{group_id}/users/{user_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromUserGroupValidateBeforeCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeUserFromUserGroup(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserFromUserGroup(Async)");
        }
        

        okhttp3.Call localVarCall = removeUserFromUserGroupCall(groupId, userId, _callback);
        return localVarCall;

    }

    /**
     * Remove User from User Group
     * Remove a user from a group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @param userId The ID of the user. (required)
     * @return UserGroupUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User removed from group successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about removing users from a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#remove_user_from_group">Remove User from User Group Documentation</a>
     */
    public UserGroupUsersResponse removeUserFromUserGroup(String groupId, String userId) throws ApiException {
        ApiResponse<UserGroupUsersResponse> localVarResp = removeUserFromUserGroupWithHttpInfo(groupId, userId);
        return localVarResp.getData();
    }

    /**
     * Remove User from User Group
     * Remove a user from a group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;UserGroupUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User removed from group successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about removing users from a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#remove_user_from_group">Remove User from User Group Documentation</a>
     */
    public ApiResponse<UserGroupUsersResponse> removeUserFromUserGroupWithHttpInfo(String groupId, String userId) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromUserGroupValidateBeforeCall(groupId, userId, null);
        Type localVarReturnType = new TypeToken<UserGroupUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove User from User Group (asynchronously)
     * Remove a user from a group with the specified ID.
     * @param groupId The ID of the user group. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User removed from group successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about removing users from a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#remove_user_from_group">Remove User from User Group Documentation</a>
     */
    public okhttp3.Call removeUserFromUserGroupAsync(String groupId, String userId, final ApiCallback<UserGroupUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromUserGroupValidateBeforeCall(groupId, userId, _callback);
        Type localVarReturnType = new TypeToken<UserGroupUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserGroup
     * @param groupId The ID of the user group. (required)
     * @param userGroupRequest Updated user group details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about updating a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#update_user_group">Update User Group Documentation</a>
     */
    public okhttp3.Call updateUserGroupCall(String groupId, UserGroupRequest userGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userGroupRequest;

        // create path and map variables
        String localVarPath = "/user_groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserGroupValidateBeforeCall(String groupId, UserGroupRequest userGroupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateUserGroup(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserGroupCall(groupId, userGroupRequest, _callback);
        return localVarCall;

    }

    /**
     * Update User Group
     * Update the name of a specified user group.
     * @param groupId The ID of the user group. (required)
     * @param userGroupRequest Updated user group details (optional)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about updating a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#update_user_group">Update User Group Documentation</a>
     */
    public UserGroup updateUserGroup(String groupId, UserGroupRequest userGroupRequest) throws ApiException {
        ApiResponse<UserGroup> localVarResp = updateUserGroupWithHttpInfo(groupId, userGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Update User Group
     * Update the name of a specified user group.
     * @param groupId The ID of the user group. (required)
     * @param userGroupRequest Updated user group details (optional)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about updating a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#update_user_group">Update User Group Documentation</a>
     */
    public ApiResponse<UserGroup> updateUserGroupWithHttpInfo(String groupId, UserGroupRequest userGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserGroupValidateBeforeCall(groupId, userGroupRequest, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User Group (asynchronously)
     * Update the name of a specified user group.
     * @param groupId The ID of the user group. (required)
     * @param userGroupRequest Updated user group details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already exists. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Max usage rate exceeded. </td><td>  -  </td></tr>
     </table>
     * Learn more about updating a specific user group.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#update_user_group">Update User Group Documentation</a>
     */
    public okhttp3.Call updateUserGroupAsync(String groupId, UserGroupRequest userGroupRequest, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserGroupValidateBeforeCall(groupId, userGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
