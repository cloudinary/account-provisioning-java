/*
 * Cloudinary Provisioning API
 * Accounts with provisioning API access can create and manage their **product environments**, **users** and **user groups** using the RESTful Provisioning API.   Provisioning API access is available [upon request](https://cloudinary.com/contact?plan=enterprise) for accounts on an [Enterprise plan](https://cloudinary.com/pricing#pricing-enterprise). 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@cloudinary.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudinary.provisioning.api;

import com.cloudinary.provisioning.ApiCallback;
import com.cloudinary.provisioning.ApiClient;
import com.cloudinary.provisioning.ApiException;
import com.cloudinary.provisioning.ApiResponse;
import com.cloudinary.provisioning.Configuration;
import com.cloudinary.provisioning.Pair;
import com.cloudinary.provisioning.ProgressRequestBody;
import com.cloudinary.provisioning.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cloudinary.provisioning.model.MessageResponse;
import com.cloudinary.provisioning.model.ProductEnvironmentRequest;
import com.cloudinary.provisioning.model.ProductEnvironmentResponse;
import com.cloudinary.provisioning.model.ProductEnvironmentsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EnvironmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnvironmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvironmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProductEnvironment
     * @param productEnvironmentRequest Product environment details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product environment created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductEnvironmentCall(ProductEnvironmentRequest productEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productEnvironmentRequest;

        // create path and map variables
        String localVarPath = "/sub_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductEnvironmentValidateBeforeCall(ProductEnvironmentRequest productEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createProductEnvironmentCall(productEnvironmentRequest, _callback);
        return localVarCall;

    }

    /**
     * Create product environment
     * Create a new product environment.
     * @param productEnvironmentRequest Product environment details (optional)
     * @return ProductEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product environment created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ProductEnvironmentResponse createProductEnvironment(ProductEnvironmentRequest productEnvironmentRequest) throws ApiException {
        ApiResponse<ProductEnvironmentResponse> localVarResp = createProductEnvironmentWithHttpInfo(productEnvironmentRequest);
        return localVarResp.getData();
    }

    /**
     * Create product environment
     * Create a new product environment.
     * @param productEnvironmentRequest Product environment details (optional)
     * @return ApiResponse&lt;ProductEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product environment created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductEnvironmentResponse> createProductEnvironmentWithHttpInfo(ProductEnvironmentRequest productEnvironmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createProductEnvironmentValidateBeforeCall(productEnvironmentRequest, null);
        Type localVarReturnType = new TypeToken<ProductEnvironmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create product environment (asynchronously)
     * Create a new product environment.
     * @param productEnvironmentRequest Product environment details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product environment created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductEnvironmentAsync(ProductEnvironmentRequest productEnvironmentRequest, final ApiCallback<ProductEnvironmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductEnvironmentValidateBeforeCall(productEnvironmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductEnvironmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductEnvironment
     * @param subAccountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product environment deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductEnvironmentCall(String subAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sub_accounts/{sub_account_id}"
            .replaceAll("\\{" + "sub_account_id" + "\\}", localVarApiClient.escapeString(subAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductEnvironmentValidateBeforeCall(String subAccountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling deleteProductEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProductEnvironmentCall(subAccountId, _callback);
        return localVarCall;

    }

    /**
     * Delete product environment
     * Delete a specific product environment.
     * @param subAccountId  (required)
     * @return MessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product environment deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public MessageResponse deleteProductEnvironment(String subAccountId) throws ApiException {
        ApiResponse<MessageResponse> localVarResp = deleteProductEnvironmentWithHttpInfo(subAccountId);
        return localVarResp.getData();
    }

    /**
     * Delete product environment
     * Delete a specific product environment.
     * @param subAccountId  (required)
     * @return ApiResponse&lt;MessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product environment deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageResponse> deleteProductEnvironmentWithHttpInfo(String subAccountId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductEnvironmentValidateBeforeCall(subAccountId, null);
        Type localVarReturnType = new TypeToken<MessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete product environment (asynchronously)
     * Delete a specific product environment.
     * @param subAccountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product environment deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductEnvironmentAsync(String subAccountId, final ApiCallback<MessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductEnvironmentValidateBeforeCall(subAccountId, _callback);
        Type localVarReturnType = new TypeToken<MessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductEnvironment
     * @param subAccountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductEnvironmentCall(String subAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sub_accounts/{sub_account_id}"
            .replaceAll("\\{" + "sub_account_id" + "\\}", localVarApiClient.escapeString(subAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductEnvironmentValidateBeforeCall(String subAccountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling getProductEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = getProductEnvironmentCall(subAccountId, _callback);
        return localVarCall;

    }

    /**
     * Get product environment
     * Retrieve a specific product environment.
     * @param subAccountId  (required)
     * @return ProductEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductEnvironmentResponse getProductEnvironment(String subAccountId) throws ApiException {
        ApiResponse<ProductEnvironmentResponse> localVarResp = getProductEnvironmentWithHttpInfo(subAccountId);
        return localVarResp.getData();
    }

    /**
     * Get product environment
     * Retrieve a specific product environment.
     * @param subAccountId  (required)
     * @return ApiResponse&lt;ProductEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductEnvironmentResponse> getProductEnvironmentWithHttpInfo(String subAccountId) throws ApiException {
        okhttp3.Call localVarCall = getProductEnvironmentValidateBeforeCall(subAccountId, null);
        Type localVarReturnType = new TypeToken<ProductEnvironmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product environment (asynchronously)
     * Retrieve a specific product environment.
     * @param subAccountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductEnvironmentAsync(String subAccountId, final ApiCallback<ProductEnvironmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductEnvironmentValidateBeforeCall(subAccountId, _callback);
        Type localVarReturnType = new TypeToken<ProductEnvironmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductEnvironments
     * @param enabled Whether to return enabled (true) or disabled (false) product environments. Default all environments. (optional)
     * @param ids A list of up to 100 product environment IDs. (optional)
     * @param prefix Returns product environments where the name begins with the specified case-insensitive string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     * Learn more about getting product environments.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_product_environments">Get product environments Documentation</a>
     */
    public okhttp3.Call getProductEnvironmentsCall(Boolean enabled, List<String> ids, String prefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sub_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductEnvironmentsValidateBeforeCall(Boolean enabled, List<String> ids, String prefix, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getProductEnvironmentsCall(enabled, ids, prefix, _callback);
        return localVarCall;

    }

    /**
     * Get product environments
     * Retrieve an array of product environments.
     * @param enabled Whether to return enabled (true) or disabled (false) product environments. Default all environments. (optional)
     * @param ids A list of up to 100 product environment IDs. (optional)
     * @param prefix Returns product environments where the name begins with the specified case-insensitive string. (optional)
     * @return ProductEnvironmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     * Learn more about getting product environments.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_product_environments">Get product environments Documentation</a>
     */
    public ProductEnvironmentsResponse getProductEnvironments(Boolean enabled, List<String> ids, String prefix) throws ApiException {
        ApiResponse<ProductEnvironmentsResponse> localVarResp = getProductEnvironmentsWithHttpInfo(enabled, ids, prefix);
        return localVarResp.getData();
    }

    /**
     * Get product environments
     * Retrieve an array of product environments.
     * @param enabled Whether to return enabled (true) or disabled (false) product environments. Default all environments. (optional)
     * @param ids A list of up to 100 product environment IDs. (optional)
     * @param prefix Returns product environments where the name begins with the specified case-insensitive string. (optional)
     * @return ApiResponse&lt;ProductEnvironmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     * Learn more about getting product environments.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_product_environments">Get product environments Documentation</a>
     */
    public ApiResponse<ProductEnvironmentsResponse> getProductEnvironmentsWithHttpInfo(Boolean enabled, List<String> ids, String prefix) throws ApiException {
        okhttp3.Call localVarCall = getProductEnvironmentsValidateBeforeCall(enabled, ids, prefix, null);
        Type localVarReturnType = new TypeToken<ProductEnvironmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product environments (asynchronously)
     * Retrieve an array of product environments.
     * @param enabled Whether to return enabled (true) or disabled (false) product environments. Default all environments. (optional)
     * @param ids A list of up to 100 product environment IDs. (optional)
     * @param prefix Returns product environments where the name begins with the specified case-insensitive string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     * Learn more about getting product environments.
     * @see <a href="https://cloudinary.com/documentation/provisioning_api#get_product_environments">Get product environments Documentation</a>
     */
    public okhttp3.Call getProductEnvironmentsAsync(Boolean enabled, List<String> ids, String prefix, final ApiCallback<ProductEnvironmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductEnvironmentsValidateBeforeCall(enabled, ids, prefix, _callback);
        Type localVarReturnType = new TypeToken<ProductEnvironmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductEnvironment
     * @param subAccountId  (required)
     * @param productEnvironmentRequest Updated product environment details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product environment updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductEnvironmentCall(String subAccountId, ProductEnvironmentRequest productEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productEnvironmentRequest;

        // create path and map variables
        String localVarPath = "/sub_accounts/{sub_account_id}"
            .replaceAll("\\{" + "sub_account_id" + "\\}", localVarApiClient.escapeString(subAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductEnvironmentValidateBeforeCall(String subAccountId, ProductEnvironmentRequest productEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subAccountId' is set
        if (subAccountId == null) {
            throw new ApiException("Missing the required parameter 'subAccountId' when calling updateProductEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductEnvironmentCall(subAccountId, productEnvironmentRequest, _callback);
        return localVarCall;

    }

    /**
     * Update product environment
     * Update the details of a product environment.
     * @param subAccountId  (required)
     * @param productEnvironmentRequest Updated product environment details (optional)
     * @return ProductEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product environment updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ProductEnvironmentResponse updateProductEnvironment(String subAccountId, ProductEnvironmentRequest productEnvironmentRequest) throws ApiException {
        ApiResponse<ProductEnvironmentResponse> localVarResp = updateProductEnvironmentWithHttpInfo(subAccountId, productEnvironmentRequest);
        return localVarResp.getData();
    }

    /**
     * Update product environment
     * Update the details of a product environment.
     * @param subAccountId  (required)
     * @param productEnvironmentRequest Updated product environment details (optional)
     * @return ApiResponse&lt;ProductEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product environment updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductEnvironmentResponse> updateProductEnvironmentWithHttpInfo(String subAccountId, ProductEnvironmentRequest productEnvironmentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProductEnvironmentValidateBeforeCall(subAccountId, productEnvironmentRequest, null);
        Type localVarReturnType = new TypeToken<ProductEnvironmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update product environment (asynchronously)
     * Update the details of a product environment.
     * @param subAccountId  (required)
     * @param productEnvironmentRequest Updated product environment details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product environment updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductEnvironmentAsync(String subAccountId, ProductEnvironmentRequest productEnvironmentRequest, final ApiCallback<ProductEnvironmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductEnvironmentValidateBeforeCall(subAccountId, productEnvironmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductEnvironmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
