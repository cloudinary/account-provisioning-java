/*
 * Cloudinary Account Provisioning API
 * Accounts with provisioning API access can create and manage their **product environments**, **users** and **user groups** using the RESTful Provisioning API.   Provisioning API access is available [upon request](https://cloudinary.com/contact?plan=enterprise) for accounts on an [Enterprise plan](https://cloudinary.com/pricing#pricing-enterprise).  The API uses **Basic Authentication** over HTTPS. Your **Provisioning Key** and **Provisioning Secret** are used for the authentication. These credentials (as well as your ACCOUNT_ID) are located in the [Cloudinary Console](https://console.cloudinary.com/pm) under **Settings > Account > Provisioning API Access**, or they can be obtained from the provisioning environment variable available on your Cloudinary Console [Dashboard](https://console.cloudinary.com/pm/developer-dashboard).  The Provisioning API has dedicated SDKs for the following languages:  * [JavaScript](https://github.com/cloudinary/account-provisioning-js) * [PHP](https://github.com/cloudinary/account-provisioning-php) * [Java](https://github.com/cloudinary/account-provisioning-java)  Useful links: * [Provisioning API reference (Classic)](https://cloudinary.com/documentation/provisioning_api_1) 
 *
 * The version of the OpenAPI document: 0.1.2
 * Contact: support@cloudinary.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudinary.account.provisioning.api;

import com.cloudinary.account.provisioning.ApiException;
import com.cloudinary.account.provisioning.model.ErrorResponse;
import com.cloudinary.account.provisioning.model.ProductEnvironment;
import com.cloudinary.account.provisioning.model.ProductEnvironmentRequest;
import com.cloudinary.account.provisioning.model.ProductEnvironmentUpdateRequest;
import com.cloudinary.account.provisioning.model.ProductEnvironmentsResponse;
import com.cloudinary.account.provisioning.model.SuccessResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductEnvironmentsApi
 */
@Disabled
public class ProductEnvironmentsApiTest {

    private final ProductEnvironmentsApi api = new ProductEnvironmentsApi();

    /**
     * Create product environment
     *
     * Create a new product environment. Any users that have access to all product environments will also automatically have access to the new product environment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProductEnvironmentTest() throws ApiException {
        ProductEnvironmentRequest productEnvironmentRequest = null;
        ProductEnvironment response = api.createProductEnvironment(productEnvironmentRequest);
        // TODO: test validations
    }

    /**
     * Delete product environment
     *
     * Delete a specific product environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductEnvironmentTest() throws ApiException {
        String subAccountId = null;
        SuccessResponse response = api.deleteProductEnvironment(subAccountId);
        // TODO: test validations
    }

    /**
     * Get product environment
     *
     * Retrieve a specific product environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductEnvironmentTest() throws ApiException {
        String subAccountId = null;
        ProductEnvironment response = api.getProductEnvironment(subAccountId);
        // TODO: test validations
    }

    /**
     * Get product environments
     *
     * Return an array of all product environments, or if conditions are specified,  return the relevant product environments. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductEnvironmentsTest() throws ApiException {
        Boolean enabled = null;
        List<String> ids = null;
        List<String> cloudNames = null;
        String prefix = null;
        ProductEnvironmentsResponse response = api.getProductEnvironments(enabled, ids, cloudNames, prefix);
        // TODO: test validations
    }

    /**
     * Update product environment
     *
     * Update the details of a product environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductEnvironmentTest() throws ApiException {
        String subAccountId = null;
        ProductEnvironmentUpdateRequest productEnvironmentUpdateRequest = null;
        ProductEnvironment response = api.updateProductEnvironment(subAccountId, productEnvironmentUpdateRequest);
        // TODO: test validations
    }

}
