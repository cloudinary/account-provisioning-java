/*
 * Cloudinary Account Provisioning API
 * Accounts with provisioning API access can create and manage their **product environments**, **users** and **user groups** using the RESTful Provisioning API.   Provisioning API access is available [upon request](https://cloudinary.com/contact?plan=enterprise) for accounts on an [Enterprise plan](https://cloudinary.com/pricing#pricing-enterprise).  The API uses **Basic Authentication** over HTTPS. Your **Provisioning Key** and **Provisioning Secret** are used for the authentication. These credentials (as well as your ACCOUNT_ID) are located in the [Cloudinary Console](https://console.cloudinary.com/pm) under **Settings > Account > Provisioning API Access**, or they can be obtained from the provisioning environment variable available on your Cloudinary Console [Dashboard](https://console.cloudinary.com/pm/developer-dashboard).  The Provisioning API has dedicated SDKs for the following languages:  * [JavaScript](https://github.com/cloudinary/account-provisioning-js) * [PHP](https://github.com/cloudinary/account-provisioning-php) * [Java](https://github.com/cloudinary/account-provisioning-java)  Useful links: * [Provisioning API reference (Classic)](https://cloudinary.com/documentation/provisioning_api_1) 
 *
 * The version of the OpenAPI document: 0.1.2
 * Contact: support@cloudinary.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudinary.account.provisioning.api;

import com.cloudinary.account.provisioning.ApiException;
import com.cloudinary.account.provisioning.model.ErrorResponse;
import com.cloudinary.account.provisioning.model.SuccessResponse;
import com.cloudinary.account.provisioning.model.UserGroup;
import com.cloudinary.account.provisioning.model.UserGroupRequest;
import com.cloudinary.account.provisioning.model.UserGroupUser;
import com.cloudinary.account.provisioning.model.UserGroupUsersResponse;
import com.cloudinary.account.provisioning.model.UserGroupsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserGroupsApi
 */
@Disabled
public class UserGroupsApiTest {

    private final UserGroupsApi api = new UserGroupsApi();

    /**
     * Add User to User Group
     *
     * Add a user to a group with the specified ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserToUserGroupTest() throws ApiException {
        String groupId = null;
        String userId = null;
        UserGroupUser response = api.addUserToUserGroup(groupId, userId);
        // TODO: test validations
    }

    /**
     * Create User Group
     *
     * Create a new user group for the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserGroupTest() throws ApiException {
        UserGroupRequest userGroupRequest = null;
        UserGroup response = api.createUserGroup(userGroupRequest);
        // TODO: test validations
    }

    /**
     * Delete User Group
     *
     * Delete a user group with the specified ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserGroupTest() throws ApiException {
        String groupId = null;
        SuccessResponse response = api.deleteUserGroup(groupId);
        // TODO: test validations
    }

    /**
     * Get User Group
     *
     * Retrieve a specific user group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserGroupTest() throws ApiException {
        String groupId = null;
        Boolean extendedDetails = null;
        UserGroup response = api.getUserGroup(groupId, extendedDetails);
        // TODO: test validations
    }

    /**
     * Get User Groups
     *
     * Retrieve an array of all user groups in the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserGroupsTest() throws ApiException {
        Boolean extendedDetails = null;
        UserGroupsResponse response = api.getUserGroups(extendedDetails);
        // TODO: test validations
    }

    /**
     * Get Users in User Group
     *
     * Retrieve the users in the group with the specified ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersInUserGroupTest() throws ApiException {
        String groupId = null;
        UserGroupUsersResponse response = api.getUsersInUserGroup(groupId);
        // TODO: test validations
    }

    /**
     * Remove User from User Group
     *
     * Remove a user from a group with the specified ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromUserGroupTest() throws ApiException {
        String groupId = null;
        String userId = null;
        UserGroupUsersResponse response = api.removeUserFromUserGroup(groupId, userId);
        // TODO: test validations
    }

    /**
     * Update User Group
     *
     * Update the name of a specified user group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserGroupTest() throws ApiException {
        String groupId = null;
        UserGroupRequest userGroupRequest = null;
        UserGroup response = api.updateUserGroup(groupId, userGroupRequest);
        // TODO: test validations
    }

}
