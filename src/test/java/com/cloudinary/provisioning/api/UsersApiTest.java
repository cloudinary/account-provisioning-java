/*
 * Cloudinary Account Provisioning API
 * Accounts with provisioning API access can create and manage their **product environments**, **users** and **user groups** using the RESTful Provisioning API.   Provisioning API access is available [upon request](https://cloudinary.com/contact?plan=enterprise) for accounts on an [Enterprise plan](https://cloudinary.com/pricing#pricing-enterprise). 
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: support@cloudinary.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudinary.provisioning.api;

import com.cloudinary.provisioning.ApiClient;
import com.cloudinary.provisioning.ApiException;
import com.cloudinary.provisioning.Configuration;
import com.cloudinary.provisioning.model.ErrorResponse;
import java.time.LocalDate;
import com.cloudinary.provisioning.model.SuccessResponse;
import com.cloudinary.provisioning.model.User;
import com.cloudinary.provisioning.model.UserRequest;
import com.cloudinary.provisioning.model.UsersResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.*;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Create user
     *
     * Create a new user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        // If you don't supply cloudinary url through apiClient.setCloudinaryUrl("Cloudinary url"> it'll be taken from environment variable
        UsersApi apiInstance = new UsersApi(apiClient);
        UserRequest createUserRequest = new UserRequest(); // CreateUserRequest | User details
        createUserRequest.setEmail("tes27111x2@gmail.com");
        createUserRequest.setName("test");
        createUserRequest.setEnabled(true);
        createUserRequest.setSubAccountIds(Arrays.asList("7b81a7d89f520870ea005c1c5eb0e6"));
        createUserRequest.setRole(UserRequest.RoleEnum.ADMIN);
        try {
            User result = apiInstance.createUser(createUserRequest);
            System.out.println(result);
        } catch (ApiException e) {
            System.err.println("Exception when calling UsersApi#createUser");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }

    /**
     * Delete user
     *
     * Delete a specific user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        SuccessResponse response = api.deleteUser(userId);
        // TODO: test validations
    }

    /**
     * Get user
     *
     * Retrieve a specific user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userId = null;
        User response = api.getUser(userId);
        // TODO: test validations
    }

    /**
     * Get users
     *
     * Returns an array of all users in the account, or if conditions are specified, returns the relevant users. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Boolean pending = null;
        List<String> ids = null;
        String prefix = null;
        String subAccountId = null;
        Boolean lastLogin = null;
        LocalDate from = null;
        LocalDate to = null;
        String unionType = null;
        UsersResponse response = api.getUsers(pending, ids, prefix, subAccountId, lastLogin, from, to, unionType);
        // TODO: test validations
    }

    /**
     * Update user
     *
     * Update the details of a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String userId = null;
        UserRequest userRequest = null;
        User response = api.updateUser(userId, userRequest);
        // TODO: test validations
    }

}
